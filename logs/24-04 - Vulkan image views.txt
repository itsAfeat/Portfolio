;tLog #018 (Vulkan) - IMAGE VIEWS!
;d\n24/04-2025
;r<hr/>

For at kunne arbejde med vores billeder, skal vi have fat i et nyt objekt
en såkaldt Image View. Image Views bruges til at beskrive hvordan et bill-
ede skal tilgås og håndteres, det er Image View'et der fortæller om det er
en depth-texture eller en normal map, man har med at gøre.\n

Da Image Views bare er detaljer om et andet objekt, skal der heldigivis ikke
laves en masse ekstra funktioner der henter alverdens data, alt der skal br-
uges er en <u style="color: #bbb;">createImageViews</u> funktion, som skal iterere igennem
en liste af Images og lave deres tilhørende Image Views.\n

;tCreate Image Views funktion 1
;r<img src="../projects/Vulkan/imageViewsCreate1.png" style="margin:1em;width:40em;"></img>

Her tjekkes der at hverken vores device(I) er NULL, og at der images i vores
Swap Chain som den kan arbejde med. Derefter resizer den vores liste af Image
Views. En lille side note omkring resize, jeg undrede mig over hvad forbrugs
årsagen er til den, da Vector datatypen er en mutable collection og man kan
tilføje data til den med push_back metoden uden at skulle resize den. Så...
;rjeg lavede et hurtigt lille <code>C++</code> program til at tjekke hastighedsforskellen,
resultatet kan ses herunder.
;r<img src="projects/Vulkan/resizeBenchmark.png" style="margin:1em;width:20em"></img>
Der virker også til at være en metode kaldet reserve, der ændre på en Vectors
capacity der er hvor mange elementer der er allokeret plads til. De virker m-
eget ens, men efter at ha' googlet lidt (og snakket med ChatGPT), fandt jeg
frem til, at reserve blot allokerer pladsen til listen, som man så kan udnyt-
te senere, hvor resize ændre på længden af listen og tilføjer tomme elementer
til listen.[1][2]\n

;tCreate Image Views funktion 2
;r<img src="../projects/Vulkan/imageViewsCreate2.png" style="margin:1em;width:40em;"></img>

Som altid, så skal der laves en [[ib;#bbb;;]Create Info]! YIIHAAA!!!
Der bliver sat følgende værdier...\n

\t<i>viewType</i>\t\t→ Om billedet er 1D, 2D, 3D eller en cubemap
\t<i>format</i>\t\t\t→ Vores Swap Chains image format
\t<i>r,g,b,a</i>\t\t\t→ Det er muligt, at mappe alle til fx r, her sættes de til "dem selv"
\t<i>aspectMask</i>\t\t→ En bitmask der specificerer hvilke aspekter af billedet der skal
\t\t\t\t\t  inkluderes
\t<i>baseMipLevel</i>\t→ Billedets første mipmap level
\t<i>levelCount</i>\t\t→ Hvor mange mipmap levels billedet har
\t<i>baseArrayLayer</i>\t→ Billedets første array layer
\t<i>layerCount</i>\t\t→ Hvor mange array layers billedet har\n

Til sidst er funktionen vkCreateImageView der laver vores Image View. Det virker
til at Image Views er endnu en Vulkan specifik ting, jeg fandt en stackoverflow
post hvor nogen snakker omkring at fremføre billeder i OpenGL(II), som førte
til en seperat gamedev side omkring texture mapping(III). På eksemplet givet
ligner det, at man også beskriver diverse aspekter af billedet, men istedet
for et desideret objekt der holder styr på den information, så gøres det hele
igennem diverse funktions kald.\n

Inden vi er helt færdige, så skal vi huske at tilføje vores nye objekter til
cleanup funktionen...\n

;tCleanup funktion
;r<img src="../projects/Vulkan/cleanup1.png" style="margin:1em;width:40em;"></img>

Det er i denne funktion, at alting bliver "ryddet op" diverse objekter, som
image views og swap chains, logical og physical devices, og selvfølgelig
programmets surface, instance og vindue.\n

Der er et problem... når jeg kører koden, får jeg en <i style="color: #bbb;">read access violation</i>,
når jeg resize'er image views vector'en på linje 11, den siger at den prøver
;rat tilgå linje RAM adresse <code>0xFFFFFF</code>, hvilket virker meget forkert...
;r<br/>

Jeg har googlet og googlet, og snakket med både ChatGPT og DeepSeek, men uden
held. Klokken er mange, og jeg vil sove. Jeg må fikse problemet en anden dag.

;r<hr/>
\t(I)   Specifikt vores logical device.
\t(II)  Se https://stackoverflow.com/questions/7006213/how-do-you-display-images-in-opengl.
\t(III) Se https://nehe.gamedev.net/tutorial/texture_mapping/12038/.
;r<br/><hr/>
\t[1] "std::vector<T,Allocator>::reserve"
\t    Jeg har brugt cppreference mange gange i min tid som C++ interesseret.
\t    Det er en ældre side, og den kan være skrevet ret spøjst til tider, men
\t    den har en masse information på meget lidt plads, endda nogle gange med
\t    eksempler.
\t    [ https://en.cppreference.com/w/cpp/container/vector/reserve ]
\t[2] "std::vector<T,Allocator>::resize"
\t    Meget af det samme som ved [1], god klassisk reference til C++
\t    [ https://en.cppreference.com/w/cpp/container/vector/resize ]